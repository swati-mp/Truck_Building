Truck-Delivery-Optimizer/
│
<<<<<<< HEAD
=======
|-- .Streamlit
|   |--config.toml

>>>>>>> df81800 (Enhanced delivery map with GraphHopper for optimized truck routing.)
├── data/
│   ├── customers.csv           # Customer details incl. geolocation
│   ├── trucks.csv              # Truck types, capacity (tons), volume, cost/km
│   ├── products.csv            # Products with size (LxWxH), weight
│   └── orders.csv              # Orders incl. product_id, qty, delivery_date
<<<<<<< HEAD
│
=======
│   |-- warehouses.csv
|   |--route_cache.json
|   |-- Allocation.csv
|
>>>>>>> df81800 (Enhanced delivery map with GraphHopper for optimized truck routing.)
├── config/
│   └── config.json             # Min/Max truck load %, API keys, etc.
│
├── pages/                      # Streamlit Pages
│   ├── 1_Customer_Master.py
│   ├── 2_Truck_Master.py
│   ├── 3_Product_Master.py
│   ├── 4_Order_Transaction.py
│   ├── 5_Truck_Config.py
│   └── 6_Truck_Allocation_Report.py
<<<<<<< HEAD
│
├── utils/                      # Python Modules
│   ├── db_utils.py             # CRUD for CSVs or SQLite
│   ├── logic.py                # Allocation, load optimization, FILO loading
│   ├── route_utils.py          # Nearest neighbor route optimization
│   └── map_utils.py            # Folium/Leaflet route visualization
=======
|   |-- 7_place_order.py
│
├── utils/                      # Python Modules
|   |-- auth.py
|   |-- constants.py
│   ├── db_utils.py             # CRUD for CSVs or SQLite
│   ├── logic.py                # Allocation, load optimization, FILO loading
│   ├── route_utils.py          # Nearest neighbor route optimization and also using Graph Hopper API
│   └── map_utils.py            # Folium/Leaflet route visualization 
>>>>>>> df81800 (Enhanced delivery map with GraphHopper for optimized truck routing.)
│
├── main.py                     # Streamlit Entry
├── requirements.txt            # Python Libraries
└── README.md                   # Project Documentation
